#tentativa inicial de bayes ingenuo
words<-read.csv()
attach(words)
library(e1071)
train=sample(1:nrow(words),7000)
words.test=words[-train,]
classificacao.test=classificacao[-train]
nb_words<-naiveBayes(classificacao~.,data=words,subset=train)
nb_pred<-predict(nb_words,classificacao.test,type=c("class"))
words.table<-table(nb_pred,classificacao.test)
rate<-sum(diag(words.table))/sum(words.table)
rate

table(classificacao)

#igualando as classes por baixo, pega a menor classe e pega n elementos de todas
library(dplyr)
equally_sample<-words %>% group_by(classificacao) %>% sample_n(size = 137)
attach(equally_sample)
train.equally=sample(1:nrow(equally_sample),89)
words.test.equally=words[-train.equally,]
classificacao.equally=equally_sample[1]
classificacao.test.equally=classificacao[-train.equally]
nb_words_equally<-naiveBayes(classificacao~.,data=equally_sample,subset=train.equally)
nb_pred_equally<-predict(nb_words_equally,classificacao.test.equally,type=c("class"))
words.table.equally<-table(nb_pred_equally,classificacao.test.equally)
rate.equally<-sum(diag(words.table.equally))/sum(words.table.equally)
rate.equally


##Verificando se esse desempenho é igual na população inteira
nb_pred_pop<-predict(nb_words_equally,classificacao,type=c("class"))
words.table.pop<-table(nb_pred_pop,classificacao)
rate.pop<-sum(diag(words.table.pop))/sum(words.table.pop)
rate.pop


#### Uma tentativa de Bootstrap deixando todas as classes com o tamanho da maior

set.seed(1)
words<-read.csv()
attach(words)
library(e1071)
train=sample(1:nrow(words),7000)
words.test=words[-train,]
words.train=words[train,]
classificacao.test=classificacao[-train]
table(words.train[1])
equally_sample<-words %>% group_by(classificacao) %>% sample_n(size = 3195,replace=TRUE)
attach(equally_sample)
train.equally=sample(1:nrow(equally_sample),3764)
words.test.equally=words[-train.equally,]
classificacao.equally=equally_sample[1]
nb_words_equally<-naiveBayes(classificacao~.,data=equally_sample,subset=train.equally)
nb_pred_equally<-predict(nb_words_equally,classificacao.test,type=c("class"))
words.table.equally<-table(nb_pred_equally,classificacao.test)
rate.equally<-sum(diag(words.table.equally))/sum(words.table.equally)
rate.equally
