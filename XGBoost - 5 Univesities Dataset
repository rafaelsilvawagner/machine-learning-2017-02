##chama os pacotes necessários
library(xgboost)
library(pROC)
library(caret)   
library(dplyr)   
set.seed(1)
#carrega a base de dados
words<-read.csv("C://Users//rwagn//Documents//R//Aprendizado de Máquina//Trabalho Jomi//palavras_1977//palavras.csv",sep=",")

for (i in 1:nrow(words)) {
    words[[i]]<-as.numeric(words[[i]])
}

# Make split index
train_index <- sample(1:nrow(words), nrow(words)*0.9)
# Full data set
data_variables <- as.matrix(words[,-1])
data_label <- words[,"classificacao"]-1
data_matrix <- xgb.DMatrix(data = as.matrix(words), label = data_label)
# split train data and make xgb.DMatrix
train_data   <- data_variables[train_index,]
train_label  <- data_label[train_index]
train_matrix <- xgb.DMatrix(data = train_data, label = train_label)
# split test data and make xgb.DMatrix
test_data  <- data_variables[-train_index,]
test_label <- data_label[-train_index]
test_matrix <- xgb.DMatrix(data = test_data, label = test_label)

numberOfClasses <- length(unique(data_label))
xgb_params <- list("objective" = "multi:softprob",
                   "eval_metric" = "mlogloss",
                   "num_class" = numberOfClasses)
nround    <- 100 # number of XGBoost rounds
cv.nfold  <- 5
# Fit cv.nfold * cv.nround XGB models and save OOF predictions
cv_model <- xgb.cv(params = xgb_params,
                   data = train_matrix, 
                   nrounds = nround,
                   nfold = cv.nfold,
                   verbose = FALSE,
                   prediction = TRUE)
plot(log(cv_model$evaluation_log$test_mlogloss_mean),type="b",main = "Analise do tamanho da Árvore",xlab = "Número de Árvores",ylab = "Log do erro de validação cruzada")



OOF_prediction <- data.frame(cv_model$pred) %>%
  mutate(max_prob = max.col(., ties.method = "last"),
         label = train_label + 1)
head(OOF_prediction)

# confusion matrix
confusionMatrix(factor(OOF_prediction$label), 
                factor(OOF_prediction$max_prob),
                mode = "everything")

nrounds=82

#plot ROC
plot.roc(train_label,OOF_prediction$max_prob,print.auc=T,print.auc.y=0.5) 


bst_model <- xgb.train(params = xgb_params,
                       data = train_matrix,
                       nrounds = nround)
# Predict hold-out test set
test_pred <- predict(bst_model, newdata = test_matrix)
test_prediction <- matrix(test_pred, nrow = numberOfClasses,
                          ncol=length(test_pred)/numberOfClasses) %>%
  t() %>%
  data.frame() %>%
  mutate(label = test_label + 1,
         max_prob = max.col(., "last"))
# confusion matrix of test set
confusionMatrix(factor(test_prediction$label),
                factor(test_prediction$max_prob),
                mode = "everything")


# get the feature real names
names <-  colnames(words[,-1])
# compute feature importance matrix
importance_matrix = xgb.importance(feature_names = names, model = bst_model)
head(importance_matrix)

# plot
gp = xgb.plot.importance(importance_matrix[1:20])
print(gp) 
xgb.plot.tree(feature_names = names, model = bst_model,n_first_tree=1)


#plot ROC
plot.roc(test_label,test_prediction$max_prob,print.auc=T,print.auc.y=0.5) 



